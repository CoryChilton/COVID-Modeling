%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Main
% Final Project Problem 2
% Loads in the initial conditions and sets parameters for the problem. Then
% it solves the spatial SIR system usind ode45 and RK4 while comparing how 
% long it takes each to run. It then plots the results for three different
% coordinates in the RK4 solved spatial SIR system by plotting the 
% susceptible, infected, and recovered individuals one above another, and 
% animates the RK4 solved spatial SIR system.
%
% Cory Chilton
% 605388291
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear all; clc; close all;

% Step 1: Set constants
load('initialValues.mat') % load in initialValeus that is stored as initialConditions
alpha = .1; % spatial contact rate
beta = .05; % contact rate
gamma = .1; % Infectious rate
tFinal = 60; % Final time of our model

% Step 2: Run solveSpatialSIR with RK4 and ode45
% uses tic and toc to find how long each one takes and displays it to the
% screen
fprintf('ode45: ')
tic
[tOde45,xOde45] = solveSpatialSIR(tFinal,initialConditions,alpha,beta, ...
    gamma,@ode45); % uses ode45
toc

fprintf('RK4:   ')
tic
[tRK4,xRK4] = solveSpatialSIR(tFinal,initialConditions,alpha,beta, ... 
    gamma,@RK4); % uses RK4
toc

% Step 3: Plot using plot time series with the RK4 data for coordinates
% (1,1), (5,18), and (30,70)
plotTimeSeries(tRK4, xRK4, 1 , 1 )
plotTimeSeries(tRK4, xRK4, 5 , 18)
plotTimeSeries(tRK4, xRK4, 30, 70)

% Step 4: Animate

% Customized pointer that kinda looks like marshmello when you move your
% mouse over the figure
% NaN is transparent, 1 is black, 2 is white
z = NaN;
marshmello =  [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; ...
               2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; ...
               2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; ...
               2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; ...
               2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; ...
               2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; ...
               2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; ...
               2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; ...
               2 2 2 2 2 2 1 1 1 2 2 2 1 1 1 2 2 2 1 1 1 2 2 2 1 1 1 2 2 2 2 2; ...
               2 2 2 2 2 2 2 1 1 1 2 1 1 1 2 2 2 2 2 1 1 1 2 1 1 1 2 2 2 2 2 2; ...
               2 2 2 2 2 2 2 2 1 1 1 1 1 2 2 2 2 2 2 2 1 1 1 1 1 2 2 2 2 2 2 2; ...
               2 2 2 2 2 2 2 2 2 1 1 1 2 2 2 2 2 2 2 2 2 1 1 1 2 2 2 2 2 2 2 2; ...
               2 2 2 2 2 2 2 2 1 1 1 1 1 2 2 2 2 2 2 2 1 1 1 1 1 2 2 2 2 2 2 2; ...
               2 2 2 2 2 2 2 1 1 1 2 1 1 1 2 2 2 2 2 1 1 1 2 1 1 1 2 2 2 2 2 2; ...
               2 2 2 2 2 2 1 1 1 2 2 2 1 1 1 2 2 2 1 1 1 2 2 2 1 1 1 2 2 2 2 2; ...
               2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; ...
               2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; ...
               2 2 2 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 2 2 2; ...
               2 2 2 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 2 2 2; ...
               2 2 2 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 2 2 2; ...
               2 2 2 2 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 2 2 2 2; ...
               2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2; ...
               2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2; ...
               2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2; ...
               2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; ...
               2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; ...
               2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; ...
               2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; ...
               z z z 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 z z z; ...
               z z z z z z 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 z z z z z z; ...
               z z z z z z z z z z z 2 2 2 2 2 2 2 2 2 2 2 z z z z z z z z z z; ...
               z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z]; 
       
figure('Pointer', 'custom', 'PointerShapeCData', marshmello); % Create new figure with the custom pointer

animate(xRK4) % Calls the animate function on the xRK4 data to animate the results
